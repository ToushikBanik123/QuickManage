import 'package:flutter/material.dart';
import '../Api/ApiService.dart';
import '../Api/Models/ApiUserModel.dart';
import '../Api/Models/TaskModel.dart';
import '../Api/Models/UserModel.dart';
import '../conts/Widgits/ColoredToast.dart';

class TaskProvider with ChangeNotifier {
  final ApiService _apiService = ApiService();
  List<Task> _tasks = [];
  List<ApiUserModel> _users = [];
  bool _showAssignedTasks = false;
  get showAssignedTasks => _showAssignedTasks;
  void setShowAssignedTasks(value){
    _showAssignedTasks = value;
    notifyListeners();
  }


  List<Task> get tasks => _tasks;
  List<ApiUserModel> get users => _users;

  Future<void> fetchTasks(BuildContext context) async {
    if (_tasks.isNotEmpty) return;
    try {
      _tasks = await _apiService.getTasks();
      notifyListeners();
    } catch (e) {
      ColoredToast.show(context, 'Error fetching tasks.', false);
      print('Error fetching tasks: $e');
    }
  }

  void refreshingTask(BuildContext context) async{
    try {
      _tasks = [];
      await fetchTasks;
      notifyListeners();
    } catch (e) {
      ColoredToast.show(context, 'Error fetching tasks.', false);
      print('Error Refreshing tasks: $e');
    }
  }

  Future<void> fetchUsers(BuildContext context) async {
    try {
      _users = await _apiService.getUsers();
      notifyListeners();
    } catch (e) {
      ColoredToast.show(context, 'Error fetching users.', false);
      print('Error fetching users: $e');
    }
  }

  Future<void> createTask(
      BuildContext context, {
        required String title,
        required String description,
        required DateTime dueDate,
        required String priority,
        required String status,
        required int assignedUserId,
      }) async {
    print("_users.length" + _users.length.toString());

    if (title.isEmpty || dueDate == null || priority.isEmpty || status.isEmpty || assignedUserId <= 0) {
      ColoredToast.show(context, 'Please fill all required fields.', false);
      return;
    }

    final newTask = Task(
      userId: assignedUserId,
      id: 0, // Assuming the ID is generated by the server
      title: title,
      description: description,
      dueDate: dueDate,
      priority: priority,
      status: status,
      assignedUserId: assignedUserId,
    );
    print("description  :  " + description);

    try {
      await _apiService.createTask(newTask);
      print("description  :  " + newTask.description);
      _tasks.insert(0, newTask); // Insert task at the top
      ColoredToast.show(context, 'Task added successfully!', true); // Success message
    } catch (e) {
      print('Error creating task: $e');
      ColoredToast.show(context, 'Failed to add task. Please try again.', false); // Error message
    }
  }


  Future<void> updateTask(
      BuildContext context, {
        required int id,
        required String title,
        required String description,
        required DateTime dueDate,
        required String priority,
        required String status,
        required int assignedUserId,
      }) async {
    if (title.isEmpty || dueDate == null || priority.isEmpty || status.isEmpty || assignedUserId <= 0) {
      ColoredToast.show(context, 'Please fill all required fields.', false);
      return;
    }

    final updatedTask = Task(
      userId: assignedUserId,
      id: id,
      title: title,
      description: description,
      dueDate: dueDate,
      priority: priority,
      status: status,
      assignedUserId: assignedUserId,
    );

    try {
      await _apiService.updateTask(updatedTask);
      final index = _tasks.indexWhere((t) => t.id == id);
      if (index != -1) {
        _tasks[index] = updatedTask;
        notifyListeners();
        ColoredToast.show(context, 'Task updated successfully!', true);
      } else {
        ColoredToast.show(context, 'Task not found.', false);
      }
    } catch (e) {
      print('Error updating task: $e');
      ColoredToast.show(context, 'Failed to update task. Important: The task will not be actually updated on the server; instead, the update will be simulated locally. Please ensure you are updating an existing task rather than creating a new one, as the server does not support new tasks.', false);
    }
  }


  Future<void> deleteTask(int id, BuildContext context) async {
    try {
      await _apiService.deleteTask(id, context);
      _tasks.removeWhere((task) => task.id == id);
      notifyListeners();
    } catch (e) {
      ColoredToast.show(context, 'Error deleting task: $e', false);
      print('Error deleting task: $e');
    }
  }
}

